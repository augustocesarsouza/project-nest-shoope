// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String?
  email        String?   @unique
  gender       String
  phone        String?
  passwordHash String?
  salt         String
  cpf          String?   @unique
  birthDate    DateTime?
  userImage    String?
  Address      Address[]
}

model Address {
  id             String  @id @default(uuid())
  fullName       String?
  phoneNumber    String?
  cep            String?
  stateCity      String?
  neighborhood   String?
  street         String?
  numberHome     String?
  complement     String?
  defaultAddress Int?

  userId String // Foreign key para o User
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) // Opcional, mas útil
  updatedAt DateTime @updatedAt // Opcional, mas útil
}

model Category {
  id          String @id @default(uuid())
  imgCategory String
  altValue    String
  title       String

  createdAt DateTime @default(now()) // Opcional, mas útil
  updatedAt DateTime @updatedAt // Opcional, mas útil
}

model Cupon {
  id                String   @id @default(uuid())
  firstText         String
  secondText        String
  thirdText         String
  dateValidateCupon DateTime
  quantityCupons    Int
  whatCuponNumber   Int
  secondImg         String?
  secondImgAlt      String?

  createdAt DateTime @default(now()) // Opcional, mas útil
  updatedAt DateTime @updatedAt // Opcional, mas útil
}

model ProductsOfferFlash {
  id                   String  @id @default(uuid())
  imgProduct           String
  altValue             String
  imgPartBottom        String?
  priceProduct         Int
  popularityPercentage Int
  discountPercentage   Int
  hourFlashOffer       String
  title                String
  tagProduct           String

  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  FlashSaleProductAllInfo FlashSaleProductAllInfo[]
}

model FlashSaleProductAllInfo {
  id                   String   @id @default(uuid())
  productReviewsRate   Int
  quantitySold         Int
  favoriteQuantity     Int
  quantityAvaliation   Int
  coins                Int?
  creditCard           Int?
  voltage              String?
  quantityPiece        Int?
  size                 String?
  productHaveInsurance Boolean?

  productsOfferFlash   ProductsOfferFlash @relation(fields: [productsOfferFlashId], references: [id])
  productsOfferFlashId String // Foreign key para o User

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LikeReview {
  id                        String @id @default(uuid())
  productFlashSaleReviewsId String
  userId                    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductDescription {
  id              String   @id @default(uuid())
  description     String
  characteristics String[]
  productId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
